(defn dt (y m d h min s)
  (list y
        m
        d
        (default h 0)
        (default min 0)
        (default s 0)))

(def conversions
  (list (list 'UNIX zero' 0 (dt 1970 1 1) '1970-01-01T00:00:00Z')
        (list 'October 15, 1998' 908417643 (dt 1998 10 15 2 14 3) '1998-10-15T02:14:03Z')))

(def tests
  (deftestgroup 'datetime'
    (deftestgroup 'describe'
      (-> conversions
          (map (fn ((name ts desc))
                 (deftest (str 'describe ' name)
                   (datetime/describe ts)
                   desc)))))
    (deftestgroup 'timestamp'
      (-> conversions
          (map (fn ((name ts desc))
                 (deftest (str 'timestamp ' name)
                   (datetime/timestamp desc)
                   ts)))))

    (deftestgroup 'format'
      (-> conversions
          (map (fn ((name ts desc iso))
                 (deftest (str 'format ' name)
                   (datetime/format ts)
                   iso))))
      (deftestgroup 'tz-offset'
        (deftest 'tz-offset = 0 converts to Z'
          (datetime/format 946771200)
          '2000-01-02T00:00:00Z')
        (deftest 'tz-offset = 0'
          (-> (list 2000 1 2 0 0 0)
              datetime/timestamp
              (datetime/format 0))
          '2000-01-02T00:00:00Z')
        (deftest 'tz-offset > 0'
          (-> (list 2000 1 2 0 0 0)
              datetime/timestamp
              (datetime/format (+ (* 4 60) 15)))
          '2000-01-02T04:15:00+04:15')
        (deftest 'tz-offset > 0 and millis'
          (-> (list 2000 1 2 0 0 0.123)
              datetime/timestamp
              (datetime/format (+ (* 4 60) 15)))
          '2000-01-02T04:15:00.123+04:15')
        (deftest 'tz-offset < 0'
          (-> (list 2000 1 2 0 0 0)
              datetime/timestamp
              (datetime/format (neg (+ (* 4 60) 15))))
          '2000-01-01T19:45:00-04:15')
        (deftest 'tz-offset < 0 and millis'
          (-> (list 2000 1 2 0 0 0.456)
              datetime/timestamp
              (datetime/format (neg (+ (* 4 60) 15))))
          '2000-01-01T19:45:00.456-04:15')))
    (deftestgroup 'parse'
      (-> conversions
          (map (fn ((name ts desc iso))
                 (deftest (str 'parse ' iso)
                   (datetime/parse iso)
                   (<< desc 0)))))
      (deftest 'parse with milliseconds'
        (datetime/parse '2023-10-21T12:34:56.529Z')
        (list 2023 10 21 12 34 56.529 0))
      (deftest 'parse with time zone offset = 0'
        (datetime/parse '2000-01-02T00:00:00+00:00')
        (list 2000 1 2 0 0 0 0))
      (deftest 'parse with time zone offset > 0'
        (datetime/parse '2000-01-02T00:00:00+04:15')
        (list 2000 1 2 0 0 0 (+ (* 4 60) 15)))
      (deftest 'parse with time zone offset > 0 and millis'
        (datetime/parse '2000-01-02T00:00:00.123+04:15')
        (list 2000 1 2 0 0 0.123 (+ (* 4 60) 15)))
      (deftest 'parse with time zone offset < 0'
        (datetime/parse '2000-01-02T00:00:00-04:15')
        (list 2000 1 2 0 0 0 (neg (+ (* 4 60) 15))))
      (deftest 'parse with time zone offset < 0 and millis'
        (datetime/parse '2000-01-02T00:00:00.456-04:15')
        (list 2000 1 2 0 0 0.456 (neg (+ (* 4 60) 15))))
      (deftestgroup 'errors'
        (deftest 'nonsense string returns ?'
          (datetime/parse '2021-nonsense')
          nil)
        (deftest 'missing time returns ?'
          (datetime/parse '2000-01-02')
          nil)
        (deftest 'malformed date returns ?'
          (datetime/parse '20000102T00:00:00Z')
          nil)
        (deftest 'malformed time returns ?'
          (datetime/parse '20000-01-02T123456Z')
          nil)
        (deftest 'malformed tz-offset returns ?'
          (datetime/parse '2000-01-02T00:00:00-0z:00')
          nil)))

    (deftestgroup 'leap-year?'
      (deftest 'multiples of 4'
        (-> (list -2024 -52 48 1040 1440 1972 2024)
            (every? datetime/leap-year?))
        true)
      (deftest 'multiples of 100'
        (-> (list -2100 -300 200 1300 1900 2100) 
            (some? datetime/leap-year?))
        false))))


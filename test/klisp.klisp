(def klisp-types-values-anon-fn
  (fn (x) x))
(def klisp-types-values
  (list nil
        -1
        0
        1
        10
        100.123
        true
        false
        ''
        'str.str'
        ,symb
        !
        cons
        klisp-types-values-anon-fn
        (cons ,a ,b)
        (list 1 2 3)))

(def langtests
  (deftestgroup 'core language'
    (deftest 'basic addition' (+ 2 2) 4)
    (deftest 'variadic addition' (+ 1 2 3 4 5) 15)
    (deftest 'basic subtraction' (- 10 5) 5)
    (deftest 'variadic subtraction' (- 100 50 10 2) 38)
    (deftest 'basic multiplication' (* 5 8) 40)
    (deftest 'variadic multiplication' (* 2 3 5 8) 240)
    (deftest 'basic power' (# 2 10) 1024)
    (deftest 'variadic power' (# 2 2 3 2) 4096)

    (deftest 'variadic =' (= 2 (+ 1 1) 2 2 2) true)
    (deftest 'variadic = (inverse)' (= 2 (+ 1 1) 3 2 2) false)
    (deftest 'variadic <' (< 1 2 6 100 200) true)
    (deftest 'variadic < (inverse)' (< 1 2 -6 100 200) false)
    (deftest 'variadic >' (> 200 100 6 2 1) true)
    (deftest 'variadic > (inverse)' (> 200 100 -6 2 1) false)
    (deftest 'variadic <=' (<= 1 1 2 5 5 100) true)
    (deftest 'variadic <= (inverse)' (<= 1 1 2 5 3 100) false)
    (deftest 'variadic >=' (>= 100 5 5 2 1 1) true)
    (deftest 'variadic >= (inverse)' (>= 100 4 5 2 1 1) false)

    (deftest 'rand always returns a float between 0 & 1'
      (every? (list-of 100 (rand))
              (partial & (<= 0 ?) (< ? 1)))
      true)
    (deftest 'srand always returns n random bytes'
      (every? (-> (srand 100)
                  split
                  (map codepoint))
              (partial & (<= 0 ?) (< ? 256)))
      true)))

(def libtests
  (deftestgroup 'core stdlib'
    (deftest 'caar'
      (caar ,((1 2) (3 4)))
      1)
    (deftest 'cadr'
      (cadr ,((1 2) (3 4)))
      ,(3 4))
    (deftest 'cdar'
      (cdar ,((1 2) (3 4)))
      ,(2))
    (deftest 'cddr'
      (cddr ,((1 2) (3 4)))
      nil)

    (deftest 'nil?'
      (list (nil? nil)
            (nil? (cons 1 2)))
      (list true false))
    (deftest 'zero?'
      (filter klisp-types-values zero?)
      (list 0))
    (deftest 'int?'
      (filter klisp-types-values int?)
      (list -1 0 1 10))
    (deftest 'float?'
      (filter klisp-types-values float?)
      (list 100.123))
    (deftest 'number?'
      (filter klisp-types-values number?)
      (list -1 0 1 10 100.123))
    (deftest 'bool?'
      (filter klisp-types-values bool?)
      (list true false))
    (deftest 'string?'
      (filter klisp-types-values string?)
      (list '' 'str.str'))
    (deftest 'symbol?'
      (filter klisp-types-values symbol?)
      ,(symb))
    (deftest 'function?'
      (filter klisp-types-values function?)
      (list ! cons klisp-types-values-anon-fn))
    (deftest 'atom?'
      (filter klisp-types-values atom?)
      (list nil -1 0 1 10 100.123 true false
            '' 'str.str' ,symb ! cons
            klisp-types-values-anon-fn))
    (deftest 'cons?'
      (filter klisp-types-values cons?)
      (list (cons ,a ,b) (list 1 2 3)))
    (deftest 'list?'
      (filter klisp-types-values list?)
      (list nil (cons ,a ,b) (list 1 2 3)))

    (deftest 'id'
      (map (list 1 2 3 nil 'a' 'b') id)
      (list 1 2 3 nil 'a' 'b'))
    (deftest 'is'
      (map (list 1 2 3 nil 'a' 'b') (is 3))
      (list false false true false false false))
    (deftest 'constantly'
      (map (list 1 2 3 nil 'a' 'b') (constantly 3))
      (list 3 3 3 3 3 3))

    (deftest 'neg'
      (map (list -10 -3.14 -1 0 1 2 42.0 100) neg)
      (list 10 3.14 1 0 -1 -2 -42.0 -100))
    (deftest 'pos?'
      (list (every? (list 1 2 4 8 3.141592) pos?)
            (every? (list 0 -1 -2 -10 -3.14) pos?))
      (list true false))
    (deftest 'neg?'
      (list (every? (list -1 -2 -4 -8 -3.141592) neg?)
            (every? (list 0 1 2 10 3.14) neg?))
      (list true false))
    (deftest 'not-pos?'
      (list (every? (list 1 2 4 8 3.141592) not-pos?)
            (every? (list 0 -1 -2 -10 -3.14) not-pos?))
      (list false true))
    (deftest 'not-neg?'
      (list (every? (list -1 -2 -4 -8 -3.141592) not-neg?)
            (every? (list 0 1 2 10 3.14) not-neg?))
      (list false true))
    (deftest 'abs'
      (map (list -10 -3.14 -1 0 1 2 42.0 100) abs)
      (list 10 3.14 1 0 1 2 42.0 100))
    (deftest 'sign'
      (map (list -10 -3.14 -1 0 1 2 42.0 100) sign)
      (list -1 -1 -1 1 1 1 1 1))
    (deftest 'sqrt'
      (every?
        (zip (map (list 0 1 9 39 100) sqrt)
             (list 0 1 3 6.2449979983 10)
             close?))
      true)
    (deftest 'even?'
      (filter (list -10 -3.14 -1 0 1 2 42.0 100) even?)
      (list -10 0 2 42.0 100))
    (deftest 'odd?'
      (filter (list -10 -3.14 -1 0 1 2 42.0 100 101) odd?)
      (list -1 1 101))
    (deftest 'inc'
      (map (list -9 -3 -1 0 1 2 10) inc)
      (list -8 -2 0 1 2 3 11))
    (deftest 'dec'
      (map (list -9 -3 -1 0 1 2 10) dec)
      (list -10 -4 -2 -1 0 1 9))

    (deftest 'is'
      (let (is-3 (is 3))
        (is-3 3))
      true)
    (deftest 'constantly'
      (let (constantly-3 (constantly 3))
        (list-of 5 (constantly-3)))
      (list 3 3 3 3 3))

    (deftest 'range, 1 arg'
      (range 10)
      (list 0 1 2 3 4 5 6 7 8 9))
    (deftest 'range, 2 args'
      (range 5 10)
      (list 5 6 7 8 9))
    (deftest 'range, 3 args'
      (range 5 10 2)
      (list 5 7 9))
    (deftest 'range, descending'
      (range 10 0 -3)
      (list 10 7 4 1))
    (deftest 'nat'
      (nat 12)
      (range 1 13))))


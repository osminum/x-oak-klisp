; json library support for encoding/decoding JSON

(defn json/serialize (x)
  'serialize a value `x` to a string'
  (do
    (defn esc (c)
      (match c
        ('\t' '\\t')
        ('\n' '\\n')
        ('\r' '\\r')
        ('\f' '\\f')
        ('"' '\\"')
        ('\\' '\\\\')
        (c)))
    (defn escape (s)
      (do
        (def max (len s))
        (defn sub (i acc)
          (if (= i max)
            acc
            (sub (+ i 1) (<< acc (esc (char-at s i))))))
        (sub 0 '')))
    (match (type x)
      (,string (str '"' (escape x) '"'))
      (,symbol (str '"' (escape (str x)) '"'))
      (,int (str x))
      (,float (str x))
      (,bool (str x))
      (,list (if (comp? x)
               (str '\{'
                    (-> x
                        (map (fn (cell)
                               (str '"'
                                    (escape (str (car cell)))
                                    '":'
                                    (json/serialize (cdr cell)))))
                        (join ','))
                    '\}')
               (str '\['
                    (-> x
                        (map json/serialize)
                        (join ','))
                    '\]')))
      ('null'))))

(defn json/parse (s)
  'parse out a value from the string `s`. Returns the symbol "error" instead on
  any syntax errors.'
  (do
    (defn Reader (s)
      (do
        (defmut index 0)
        (defmut err? false)
        (defn next ()
          (do
            (incm! index)
            (default (char-at s (- (getm index) 1)) '')))
        (defn peek ()
          (default (char-at s (getm index)) ''))
        (defn next-word (n)
          (if (> (+ (getm index) n) (len s))
            (do
              (setm! index (len s))
              nil)
            (do
              (def idx (getm index))
              (def word (gets s idx (+ idx n)))
              (incm! index n)
              word)))
        ; fast-forward through whitespace
        (defn forward ()
          (do
            (defn -forward ()
              (when (space? (peek))
                (do
                  (incm! index)
                  (-forward))))
            (-forward)))
        (comp ,next next
              ,peek peek
              ,forward forward
              ,next-word next-word
              ,done? (fn ()
                       (>= (getm index (len s))))
              ,err! (fn ()
                      (do
                        (setm! err? true)
                        ,error))
              ,err? (fn () (getm err?)))))
    (defmacro rcall (r fname . args)
      (quasiquote
        (apply (getc (unquote r) (quote (unquote fname)))
               (unquote (cons ,list args)))))
    (defn parse-null (r)
      (if (= (rcall r next-word 4) 'null')
        nil
        (rcall r err!)))
    (defn parse-string (r)
      (do
        (rcall r next) ; eat the double quote
        (defn -parse (acc)
          (let (c (rcall r next))
            (match c
              ('' (rcall r err!))
              ('\\' (-parse (<< acc (let (c (rcall r next))
                                      (match c
                                        ('t' '\t')
                                        ('n' '\n')
                                        ('r' '\r')
                                        ('f' '\f')
                                        ('"' '"')
                                        (c))))))
              ('\"' acc)
              ((-parse (<< acc c))))))
        (-parse '')))
    (defn parse-number (r)
      (do
        (def decimal? (defmut false))
        (def negate? (if (= (rcall r peek) '-')
                       (do
                         (rcall r next)
                         true)
                       false))
        (defn -parse (acc)
          (let (c (rcall r peek))
            (cond ((char-between? c '0' '9') (-parse (<< acc (rcall r next))))
                  ((= c '.') (if (getm decimal?)
                               (rcall r err!)
                               (do
                                 (setm! decimal? true)
                                 (-parse (<< acc (rcall r next))))))
                  (acc))))
        (def result (-parse ''))
        (let (parsed (if (getm decimal?)
                       (float result)
                       (int result)))
          (if (nil? parsed)
            ,error
            (if negate?
              (neg parsed)
              parsed)))))
    (defn parse-true (r)
      (if (= (rcall r next-word 4) 'true')
        true
        (rcall r err!)))
    (defn parse-false (r)
      (if (= (rcall r next-word 5) 'false')
        false
        (rcall r err!)))
    (defn parse-list (r)
      (do
        (rcall r next) ; eat the \[
        (rcall r forward)
        (defn -parse (acc)
          (if (rcall r err?)
            ,error
            (match (rcall r peek)
              ('' (rcall r err!))
              ('\]' (do
                      (rcall r next) ; eat the \]
                      acc))
              ((let (acc (<< acc (-parse-reader r)))
                 (do
                   (rcall r forward)
                   (when (= (rcall r peek) ',')
                     (rcall r next))
                   (rcall r forward)
                   (-parse acc)))))))
        (-parse nil)))
    (defn parse-object (r)
      (do
        (rcall r next) ; eat the \{
        (rcall r forward)
        (defn -parse (acc)
          (if (rcall r err?)
            ,error
            (match (rcall r peek)
              ('' (rcall r err!))
              ('\}' (do
                      (rcall r next)
                      acc))
              ((let (key (parse-string r))
                 (unless (rcall r err?)
                   (do
                     (rcall r forward)
                     (when (= (rcall r peek) ':')
                       (rcall r next))
                     (let (val (-parse-reader r))
                       (unless (rcall r err?)
                         (do
                           (rcall r forward)
                           (when (= (rcall r peek) ',')
                             (rcall r next))
                           (rcall r forward)
                           (-parse (setc acc key val))))))))))))
        (-parse (comp))))
    (defn -parse-reader (r)
      (do
        (rcall r forward) ; trim preceding whitespace
        (let (result (match (rcall r peek)
                       ('n' (parse-null r))
                       ('\"' (parse-string r))
                       ('t' (parse-true r))
                       ('f' (parse-false r))
                       ('\[' (parse-list r))
                       ('\{' (parse-object r))
                       ((parse-number r))))
          (if (rcall r err?)
            ,error
            result))))
    (-> s
        Reader
        -parse-reader)))


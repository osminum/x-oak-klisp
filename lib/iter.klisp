; iterator and sequence functions

(defn base-iterator (seq)
  'returns an empty string for strings, nil for lists'
  (if (list? seq) nil ''))

(defn empty? (seq)
  'reports whether a given iterable is empty'
  (= seq (base-iterator seq)))

(defn first (seq)
  'returns the first item of a given iterable, or the iterable\'s base iterator
  if the iterable is empty'
  (if (list? seq)
    (car seq)
    (gets seq 0 1)))

(defn first! (seq x)
  'mutates in place the first item of a given iterable'
  (if (list? seq)
    (car! seq x)
    (sets! seq 0 x)))

(defn rest (seq)
  'returns the rest (all items excluding the first) of a given iterable, or the
  iterable\'s base iterator if the iterable has one or fewer items'
  (if (list? seq)
    (cdr seq)
    (gets seq 1)))

(defn rest! (seq xs)
  'mutates in place everything except the first item of a given iterable'
  (if (list? seq)
    (cdr! seq xs)
    (sets! seq 1 xs)))

(defn conj (x seq)
  'conj(oin)s `x` onto the front of the iterable `seq`, producing a new seq'
  (if (list? seq)
    (cons x seq)
    (+ x seq)))

; generic iterator implementations

(defn nth (xs i)
  'returns the `i`th item of the iterable `xs`, or the base iterator of the
  iterable if there is not sufficient length'
  (if (not-pos? i)
    (if (zero? i)
      (first xs)
      (base-iterator xs))
    (nth (rest xs) (dec i))))

(defn nth! (xs i x)
  'mutates in place the `i`th item of the iterable `xs` to be `x`'
  (if (list? xs)
    (if (not-pos? i)
      (first! xs x)
      (nth! (rest xs) (dec i) x))
    (sets! xs i (char-at x 0))))

(defn second (xs)
  'returns the second item of an iterable; equivalent to (nth xs 1)'
  (nth xs 1))

(defn last (xs)
  'returns the last item of an iterable, or the base iterator if the iterable
  is empty'
  (if (empty? xs)
    xs
    (if (empty? (rest xs))
      (first xs)
      (last (rest xs)))))

(defn index (xs x)
  'returns the index at which `x` is first found in the iterable `xs`, or -1 if
  it cannot be found'
  (do
    (defn index-from (xs x i)
      (if (empty? xs)
        -1
        (if (= (first xs) x)
          i
          (index-from (rest xs) x (inc i)))))
    (index-from xs x 0)))

(defn contains? (xs x)
  'reports whether `x` is a member of the iterable `xs`'
  (<= 0 (index xs x)))

(defn find (xs f?)
  'returns the index at which `(f? x)` is true for some item `x` in the
  iterable `xs`, or -1 if no such item exists'
  (do
    (defn find-from (xs f? i)
      (if (empty? xs)
        -1
        (if (f? (first xs))
          i
          (find-from (rest xs) f? (inc i)))))
    (find-from xs f? 0)))

(defn some? (xs f?)
  'returns true if at least one item in the iterable `xs` satisfies the
  predicate `f?`. `f?` defaults to `id`'
  (do
    (default f? id)
    (if (empty? xs)
      false
      (if (f? (first xs))
        true
        (some? (rest xs) f?)))))

(defn every? (xs f?)
  'returns false if at least one item in the iterable `xs` does not satisfy the
  predicate `f?`. `f?` defaults to `id`'
  (do
    (default f? id)
    (if (empty? xs)
      true
      (if (f? (first xs))
        (every? (rest xs) f?)
        false))))

(defn append xs
  'join one or more iterables together'
  (do
    (defn append-two (xs ys)
      (if (empty? xs)
        ys
        (conj (first xs)
              (append (rest xs) ys))))
    (reduce xs nil append-two)))

(defn reverse (xs)
  'reverse the order of an iterable'
  (do
    (defn -reverse (acc xs)
      (if (empty? xs)
        acc
        (-reverse (conj (first xs)
                        acc)
                  (rest xs))))
    (-reverse (base-iterator xs) xs)))

(defn enumerate (xs)
  'return an iterable of pairs `(i x)` where `i` counts up from 0, and `x`
  comes from `xs`; resembles Python\'s enumerate() builtin'
  (do
    (defn -enumerate (xs i)
      (if (empty? xs)
        nil
        (conj (list i (first xs))
              (-enumerate (rest xs) (+ i 1)))))
    (-enumerate xs 0)))

(defn map (xs f)
  'return an iterable that results from applying `f` to each item in `xs`'
  (if (empty? xs)
    xs
    (conj (f (first xs))
          (map (rest xs) f))))

(defn reduce (xs acc f)
  'return the result of folding the iterable `xs` with the reducer `f`'
  (if (empty? xs)
    acc
    (reduce (rest xs)
            (f acc (first xs))
            f)))

(defn filter (xs f?)
  'return an iterable containing only the items from `xs` that satisfy the
  predicate `f?`'
  (if (empty? xs)
    xs
    (if (f? (first xs))
      (conj (first xs)
            (filter (rest xs) f?))
      (filter (rest xs) f?))))

(defn exclude (xs f?)
  'return an iterable containing only the items from `xs` that did not satisfy
  the predicate `f?`'
  (if (empty? xs)
    xs
    (if (f? (first xs))
      (exclude (rest xs) f?)
      (conj (first xs)
            (exclude (rest xs) f?)))))

(defn separate (xs f?)
  'sort elements of iterable `xs` into two different iterables depending on the
  result of the predicate `f?`'
  (list (filter xs f?)
        (exclude xs f?)))

(defn each (xs f)
  'apply the function `f` to each item in `xs`'
  (unless (empty? xs)
    (do
      (f (first xs))
      (each (rest xs) f))))

(defn size (xs)
  'return the number of items in the iterable `xs`'
  (if (list? xs)
    (reduce xs 0 inc)
    (len xs)))

(defn take (xs n)
  'return an iterable containing only the first `n` items of `xs`'
  (let (n (max (list n 0)))
    (if (| (empty? xs) (zero? n))
      (base-iterator xs)
      (conj (first xs)
            (take (rest xs) (dec n))))))

(defn take-while (xs f?)
  'return an iterable containing only the first consecutive items of `xs` that
  satisfy the predicate `f?`'
  (if (empty? xs)
    xs
    (if (f? (first xs))
      (conj (first xs)
            (take-while (rest xs) f?))
      (base-iterator xs))))

(defn drop (xs n)
  'return an iterable containing all items after the first `n` of `xs`'
  (let (n (max (list n 0)))
    (if (| (empty? xs) (zero? n))
      xs
      (drop (rest xs) (dec n)))))

(defn drop-while (xs f?)
  'return an iterable excluding the first consecutive items of `xs` that
  satisfy the predicate `f?`'
  (if (empty? xs)
    xs
    (if (f? (first xs))
      (drop-while (rest xs) f?)
      xs)))

(defn slice (xs start end)
  'return a sub-slice of the iterable `xs` from index `start` to `end`, which
  are 0 and `(size xs)` by default. For strings, this is equivalent to `gets`.'
  (do
    (default start 0)
    (default end (size xs))
    (-> xs
        (drop start)
        (take (- end start)))))

(defn flatten (xs)
  'given a list of iterables, return a new iterable resulting from joining
  together every iterable in the list'
  (reduce xs (base-iterator (first xs)) append))

(defn zip (xs ys f)
  'return an iterable whose nth item is the combination of nth items of `xs`
  and `ys`. By default, elements of the two iterables are combined using
  `list`, but this can be overridden using `f`.'
  (do
    (default f (if (list? xs) list +))
    (if (| (empty? xs) (empty? ys))
      nil
      (cons (f (first xs) (first ys))
            (zip (rest xs) (rest ys) f)))))

(defn interleave (xs ys)
  'given two iterables, return a new iterable where items appear first from
  `xs`, then `ys`, then `xs` again, and so on, interleaving items of each
  iterable'
  (-> (zip xs ys) flatten))

(defn compact (xs)
  'filter out nil values from the given list, returning a new list'
  (exclude xs nil?))

(defn partition (xs by)
  'partition the given iterable by either count or a predicate `by`, returning
  a list of iterables, each of the same type as `xs`'
  (match (type by)
    (,nil (partition xs id))
    (,int (do
            (defn -partition (xs n)
              (let (tail (drop xs n))
                (if (empty? tail)
                  (list xs)
                  (conj (take xs n)
                        (-partition tail n)))))
            (-partition xs (if (< by 1) 1 by))))
    (,function (do
                 (defn cut-by (xs f)
                   (if (empty? xs)
                     (list (base-iterator xs) (base-iterator xs))
                     (let (first-half (conj (first xs)
                                            (take-while (rest xs)
                                                        (let (f-of-first (f (first xs)))
                                                          (fn (x) (= (f x) f-of-first))))))
                       (list first-half
                             (drop xs (size first-half))))))
                 (defn -partition (xs f)
                   (if (empty? xs)
                     nil
                     (do
                       (def cut (cut-by xs f))
                       (def first-half (car cut))
                       (def rest-half (cadr cut))
                       (cons first-half
                             (-partition rest-half f)))))
                 (-partition xs by)))))

(defn uniq (xs by)
  'returns a list of unique items in `xs`, assuming a pre-sorted `xs`. This is
  analogous to the UNIX "sort" utility.'
  (-> (partition xs by)
      (map first)))


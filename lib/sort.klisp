; sort library, implementing quicksort and mergesort

(defn merge (left right)
  (cond ((empty? left) right)
        ((empty? right) left)
        ((do
           (def l (first left))
           (def r (first right))
           (if (<= l r)
             (conj l (merge (rest left) right))
             (conj r (merge left (rest right))))))))

(defn mergesort (xs)
  (if (< (size xs) 2)
    xs
    (let (split-at (int (/ (size xs) 2)))
      (merge (mergesort (take xs split-at))
             (mergesort (drop xs split-at))))))

(defn quicksort (xs)
  (if (< (size xs) 2)
    xs
    (let (pivot (nth xs (int (/ (dec (size xs)) 2)))) ; heuristic: pick midpoint
      (-> (quicksort (filter xs (partial < ? pivot)))
          (append (filter xs (is pivot)))
          (append (quicksort (filter xs (partial > ? pivot))))))))

(defn sort! (xs pred)
  (do
    (default pred id)
    (def vpred (map xs pred))
    (defn containing-cons (xs i)
      (if (zero? i)
        xs
        (containing-cons (cdr xs) (dec i))))
    (if (list? xs)
      (defn swap (xs i j)
        (do
          (def ic (containing-cons xs i))
          (def jc (containing-cons xs j))
          (def tmp (car ic))
          (car! ic (car jc))
          (car! jc tmp)))
      (defn swap (xs i j)
        (do
          (def tmp (nth xs i))
          (nth! xs i (nth xs j))
          (nth! xs j tmp))))
    (defn partition (xs lo hi)
      (let (pivot (nth vpred lo))
        (do
          (defn lsub (i)
            (if (< (nth vpred i) pivot)
              (lsub (inc i))
              i))
          (defn rsub (j)
            (if (> (nth vpred j) pivot)
              (rsub (dec j))
              j))
          (defn sub (i j)
            (do
              (def i (lsub i))
              (def j (rsub j))
              (if (< i j)
                (do
                  (swap xs i j)
                  (swap vpred i j)
                  (sub (inc i) (dec j)))
                j)))
          (sub lo hi))))
    (defn quicksort (xs lo hi)
      (if (| (< (size xs) 2)
             (>= lo hi))
        xs
        (let (p (partition xs lo hi))
          (do
            (quicksort xs lo p)
            (quicksort xs (inc p) hi)))))
    (quicksort xs 0 (dec (size xs)))))

(defn sort (xs pred)
  (-> (slice xs)
      (sort! pred)))


; math library

; Euclid's GCD algorithm
(defn gcd (a b)
      ; prereq: a < b
      (do
        (defn sub (a b)
              (if (zero? a)
                b
                (sub (% b a) a)))
        (def a (abs a))
        (def b (abs b))
        (if (> a b)
          (sub b a)
          (sub a b))))

; LCM using GCD
(defn lcm (a b)
      (* a (/ b (gcd a b))))

(defn factor? (n c)
      (zero? (% n c)))

; prime filter
(defn prime? (n)
      (if (< n 2)
        false
        (do
          (def max (inc (int (sqrt n))))
          (defn sub (i)
                (if (= i max)
                  true
                  (if (factor? n i)
                    false
                    (sub (inc i)))))
          (sub 2))))

; prime factorize natural number
(defn prime-factors (n)
      (do
        (defn sub (pfs m pf)
              (if (= m 1)
                pfs
                (if (factor? m pf)
                  (sub (cons pf pfs)
                       (/ m pf)
                       pf)
                  (sub pfs
                       m
                       (inc pf)))))
        (reverse (sub () n 2))))

; naive factorize
(defn factors (n)
      (let (first-half (-> (nat (int (sqrt n)))
                           (filter (partial (factor? n ?)))))
        (cond
          ((nil? first-half) first-half)
          ((nil? (cdr first-half)) first-half)
          (true
            (join first-half
                  (let (rev-first-half (reverse first-half))
                    (if (= (car rev-first-half)
                           (/ n (car rev-first-half)))
                      (cdr (map rev-first-half (partial (/ n ?))))
                      (map rev-first-half (partial (/ n ?))))))))))

(def sum
     (fn (ns) (reduce ns 0 +)))

(def prod
     (fn (ns) (reduce ns 1 *)))

(defn mean (xs)
      (/ (sum xs) (size xs)))

(defn geomean (xs)
      (# (prod xs) (/ 1 (size xs))))

(def min
     (fn (xs)
         (if (nil? xs)
           ()
           (reduce xs
                   (car xs)
                   (fn (a b)
                       (if (< a b) a b))))))

(def max
     (fn (xs)
         (if (nil? xs)
           ()
           (reduce xs
                   (car xs)
                   (fn (a b)
                       (if (< a b) b a))))))


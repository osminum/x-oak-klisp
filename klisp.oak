#!/usr/bin/env oak

// A Klisp written in Oak
// ported over from the Ink implementation at thesephist/klisp.

{
	println: println
	default: default
	clone: clone
	slice: slice
	map: map
	find: find
	each: each
	reduce: reduce
	entries: entries
	fromHex: fromHex
} := import('std')
{
	join: join
	replace: replace
	trim: trim
	endsWith?: endsWith?
} := import('str')
fs := import('fs')

// alias print, because it will be overridden later
oakPrint := print

// Oak list -> Klisp list
fn listify(xs) {
	fn sub(acc, i) if i {
		-1 -> acc
		_ -> sub(
			[xs.(i), acc]
			i - 1
		)
	}
	sub(?, len(xs) - 1)
}

// like std.map, but works on lisp lists
fn mapSexpr(L, f) {
	fn sub(mapped, rest) if rest {
		? -> mapped
		_ -> sub(mapped << f(rest.0), rest.1)
	}
	sub([], L) |> listify()
}

// like std.reduce, but works on lisp lists
fn reduceSexpr(L, init, f) {
	fn sub(acc, node) if node {
		? -> acc
		_ -> sub(f(acc, node.0), node.1)
	}
	sub(init, L)
}

fn Reader(s) {
	i := 0

	fn peek() s.(i)
	fn peekAhead(n) s.(i + n)
	fn next {
		c := peek()
		i <- i + 1
		c
	}
	fn nextSpan {
		fn sub(acc) if peek() {
			?, ' ', '\n', '\t', '(', ')' -> acc
			_ -> sub(acc << next())
		}
		sub('')
	}
	fn forward {
		fn sub() if peek() {
			' ', '\n', '\t' -> {
				next()
				sub()
			}
			// ignore comments
			';' -> {
				fn sub() if next() {
					? -> ?
					'\n' -> forward()
					_ -> sub()
				}
				sub()
			}
		}
		sub()
	}

	{
		peek: peek
		peekAhead: peekAhead
		next: next
		nextSpan: nextSpan
		forward: forward
	}
}

fn read(s) {
	r := Reader(s |> trim())

	{
		peek: peek
		peekAhead: peekAhead
		next: next
		nextSpan: nextSpan
		forward: forward
	} := r

	fn parse() if c := peek() {
		? -> { error: 'EOF' }
		')' -> { error: 'Unexpected )' }
		',' -> {
			next()
			forward()
			if type(result := parse()) {
				:object -> result
				_ -> [:quote, [result, ?]]
			}
		}
		'\'' -> {
			next()
			fn sub(acc) if peek() {
				? -> { error: 'EOF' }
				'\\' -> {
					next()
					sub(
						acc << if d := next() {
							't' -> '\t'
							'n' -> '\n'
							'r' -> '\r'
							'f' -> '\f'
							'x' -> {
								a := peek() |> default(' ')
								b := peekAhead(1) |> default(' ')
								maybeHexDigits := if hex := fromHex(a + b) {
									? -> 'x'
									_ -> {
										next()
										next()
										char(hex)
									}
								}
							}
							_ -> d
						}
					)
				}
				'\'' -> {
					next()
					forward()
					acc
				}
				_ -> sub(acc << next())
			}
			sub('')
		}
		'(' -> {
			next()
			forward()
			fn sub(acc, tail) if peek() {
				? -> { error: 'EOF' }
				')' -> {
					next()
					forward()
					acc
				}
				'.' -> {
					next()
					forward()
					if type(result := parse()) {
						:object -> result
						_ -> {
							cons := result
							forward()
							acc := if acc {
								? -> cons
								_ -> {
									tail.1 := cons
									acc
								}
							}
							sub(acc, cons)
						}
					}
				}
				_ -> if type(result := parse()) {
					:object -> result
					_ -> {
						cons := [result, ?]
						forward()
						acc := if acc {
							? -> cons
							_ -> {
								tail.1 := cons
								acc
							}
						}
						sub(acc, cons)
					}
				}
			}
			sub(?, ?)
		}
		_ -> {
			span := nextSpan()
			forward()
			if {
				? != x := int(span) -> x
				? != x := float(span) -> x
				span = '_' -> _
				_ -> atom(span)
			}
		}
	}

	// forward through possible space & comments at start
	forward()

	// if input is empty or comment-only, just eval to ()
	if peek() != ? -> {
		if type(result := parse()) {
			:object -> result
			_ -> {
				term := [result, ?]
				prog := [:do, term]
				forward()
				fn sub(tail) if peek() {
					? -> prog
					_ -> if type(result := parse()) {
						:object -> result
						_ -> {
							term := [result, ?]
							tail.1 := term
							forward()
							sub(term)
						}
					}
				}
				sub(term)
			}
		}
	}
}

fn must(result) if type(result) {
	:object -> {
		println(result.error)
		exit(1)
	}
	_ -> result
}

// globally unique sentinel values
LispNull := fn {}
LispEmpty := fn {}

fn getv(env, name, err?) if v := env.(name) {
	? -> if e := env.'\x00env' {
		? -> {
			if err? -> println('Unbound name "' + string(name) + '"')
			?
		}
		_ -> getv(e, name, err?)
	}
	LispNull -> ?
	LispEmpty -> _
	_ -> v
}

fn setv(env, name, v) env.(name) := if type(v) {
	:null -> LispNull
	:empty -> LispEmpty
	_ -> v
}

fn makeFn(f, L) [false, f, L]
fn makeMacro(f, L) [true, f, L]
fn makeNative(f) makeFn(f, ?)

fn eval(L, env) if type(L) {
	:atom -> getv(env, string(L), true)
	:list -> if L.0 {
		:def -> {
			name := L.(1).0
			val := eval(L.(1).(1).0, env)
			setv(env, name, val)
			val
		}
		:do -> {
			fn sub(form) if form.1 {
				? -> eval(form.0, env)
				_ -> {
					eval(form.0, env)
					sub(form.1)
				}
			}
			sub(L.1)
		}
		:if -> eval(
			if eval(L.(1).0, env) {
				true -> L.(1).(1).0
				_ -> L.(1).(1).(1).0
			}
			env
		)
		:fn -> {
			params := L.(1).0
			body := if L.(1).(1).1 {
				? -> L.(1).(1).0
				_ -> L.(1).(1).(1).0
			}
			makeFn(fn(args) eval(
				body
				{
					envc := { '\x00env': env }
					fn setScope(param, arg) if type(param) {
						:atom -> setv(envc, param, arg)
						:list -> {
							if arg { ? -> arg <- [] }
							setScope(param.0, arg.0)
							setScope(param.1, arg.1)
						}
					}
					setScope(params, args)
					envc
				}
			), L)
		}
		:quote -> L.(1).0
		:macro -> {
			params := L.(1).0
			body := if L.(1).(1).1 {
				? -> L.(1).(1).0
				_ -> L.(1).(1).(1).0
			}
			makeMacro(fn(args) eval(
				body
				{
					envc := { '\x00env': env }
					fn setScope(param, arg) if type(param) {
						:atom -> setv(envc, param, arg)
						:list -> {
							if arg { ? -> arg <- [] }
							setScope(param.0, arg.0)
							setScope(param.1, arg.1)
						}
					}
					setScope(params, args)
					envc
				}
			), L)
		}
		:expand -> {
			expr := eval(L.(1).0, env)
			if {
				expr = ? -> expr
				type(expr.0) = :atom -> if funcStub := getv(env, string(expr.0), false) {
					[_, _, _] -> if funcStub.0 {
						true -> eval(funcStub.1, env)(expr.1)
						_ -> expr
					}
					_ -> expr
				}
				_ -> expr
			}
		}
		:import -> {
			path := eval(L.(1).0, env)
			prefix := if L.(1).1 {
				? -> path
				_ -> eval(L.(1).(1).0, env)
			}
			fs.readFile(path + '.klisp') |>
				read() |>
				must() |>
				eval(envi := { '\x00env': Env })
			envi |> entries() |> each(
				fn(pair) if pair.0 != '\x00env' -> setv(env, prefix + '/' + pair.0, pair.1)
			)
		}
		_ -> {
			funcStub := eval(L.0, env)
			func := eval(funcStub.1, env)
			argcs := L.1

			// funcStub.0 reports whether the stub is a macro
			if funcStub.0 {
				true -> func(argcs) |> eval(env)
				_ -> func(argcs |> mapSexpr(fn(x) eval(x, env)))
			}
		}
	}
	:string -> clone(L)
	_ -> L
}

Env := {
	// constants
	'nil': LispNull
	'true': true
	'false': false

	// language primitives
	'car': makeNative(fn(L) if L.0 != ? -> L.(0).0)
	'cdr': makeNative(fn(L) if L.0 != ? -> L.(0).1)
	'car!': makeNative(fn(L) L.(0).0 := L.(1).0)
	'cdr!': makeNative(fn(L) L.(0).1 := L.(1).0)
	'cons': makeNative(fn(L) [L.0, L.(1).0])
	'len': makeNative(fn(L) if type(x := L.0) {
		:string -> len(x)
		:atom -> len(string(x))
		_ -> 0
	})
	'gets': makeNative(fn(L) if type(s := L.0) {
		:string -> slice(
			s
			if L.1 != ? -> int(L.(1).0)
			if L.1 != ? & L.(1).1 != ? -> int(L.(1).(1).0)
		)
		_ -> ''
	})
	'sets!': makeNative(fn(L) if type(s := L.0) {
		:string -> {
			idx := int(L.(1).0)
			s.(idx) := L.(1).(1).0
		}
		_ -> ''
	})
	'apply': makeNative(fn(L) {
		funcStub := L.0
		func := funcStub.1
		args := L.(1).0
		// can only apply a fn, not a macro
		if !funcStub.0 -> func(args)
	})
	'doc': makeNative(fn(L) {
		impl := L.(0).2
		if impl.(1).(1).1 != ? -> impl.(1).(1).0
	})

	// ports of Oak's builtins
	'char': makeNative(fn(L) char(int(L.0)))
	'codepoint': makeNative(fn(L) codepoint(L.0))
	'sin': makeNative(fn(L) sin(L.0))
	'cos': makeNative(fn(L) cos(L.0))
	'tan': makeNative(fn(L) tan(L.0))
	'int': makeNative(fn(L) int(L.0))
	'float': makeNative(fn(L) float(L.0))
	'rand': makeNative(rand)
	'time': makeNative(time)
	'nanotime': makeNative(nanotime)
	'wait': makeNative(fn(L) wait(float(L.0)))
	'exit': makeNative(fn(L) exit(int(L.0)))
	'args': makeNative(fn(_) {
		fn makeList(xs) if len(xs) {
			0 -> ?
			_ -> [xs.0, makeList(xs |> slice(1))]
		}
		makeList(args())
	})

	// arithmetic and logical operators
	'=': makeNative(fn(L) L.1 |> reduceSexpr(true, fn(acc, x) acc & L.0 = x))
	'<': makeNative(fn(L) if L {
		? -> true
		_ -> {
			last := L.0
			L.1 |> reduceSexpr(true, fn(acc, x) {
				y := acc & last < x
				last <- x
				y
			})
		}
	})
	'>': makeNative(fn(L) if L {
		? -> true
		_ -> {
			last := L.0
			L.1 |> reduceSexpr(true, fn(acc, x) {
				y := acc & last > x
				last <- x
				y
			})
		}
	})
	'<=': makeNative(fn(L) if L {
		? -> true
		_ -> {
			last := L.0
			L.1 |> reduceSexpr(true, fn(acc, x) {
				y := acc & last <= x
				last <- x
				y
			})
		}
	})
	'>=': makeNative(fn(L) if L {
		? -> true
		_ -> {
			last := L.0
			L.1 |> reduceSexpr(true, fn(acc, x) {
				y := acc & last >= x
				last <- x
				y
			})
		}
	})
	'+': makeNative(fn(L) L.1 |> reduceSexpr(L.0, fn(a, b) a + b))
	'-': makeNative(fn(L) L.1 |> reduceSexpr(L.0, fn(a, b) a - b))
	'*': makeNative(fn(L) L.1 |> reduceSexpr(L.0, fn(a, b) a * b))
	'/': makeNative(fn(L) L.1 |> reduceSexpr(L.0, fn(a, b) a / b))
	'%': makeNative(fn(L) L.1 |> reduceSexpr(L.0, fn(a, b) a % b))
	'#': makeNative(fn(L) L.1 |> reduceSexpr(L.0, pow))

	// types and conversions
	'type': makeNative(fn(L) if L.0 {
		[_, _, _] -> :function
		[_, _] -> :list
		_ -> if ty := type(L.0) {
			:null -> :nil
			:atom -> :symbol
			_ -> ty
		}
	})
	'string->int': makeNative(fn(L) int(L.0) |> default(0))
	'string->float': makeNative(fn(L) float(L.0) |> default(0))
	'string->symbol': makeNative(fn(L) atom(L.0))
	'->string': makeNative(fn(L) if type(x := L.0) {
		:string -> x
		_ -> print(L.0)
	})

	// I/O, system
	'print': makeNative(fn(L) {
		output := L.1 |> reduceSexpr(
			if type(L.0) {
				:string -> L.0
				_ -> print(L.0)
			}
			fn(a, b) a + ' ' + if type(b) {
				:string -> b
				_ -> print(b)
			}
		)
		oakPrint(output)
	})
	'read-file': makeNative(fn(L) if type(path := L.0) {
		:string -> fs.readFile(path)
		_ -> ?
	})
	'write-file': makeNative(fn(L) if {
		type(path := L.0) = :string & type(file := L.(1).0) = :string ->
			fs.writeFile(path, file)
		_ -> ?
	})
	'stat-file': makeNative(fn(L) if type(path := L.0) {
		:string -> {
			stat := fs.statFile(path)
			name := [:name, stat.name]
			len := [:len, stat.len]
			mod := [:mod, stat.mod]
			dir := [:dir, stat.dir]
			[name, [len, [mod, [dir, ?]]]]
		}
		_ -> ?
	})
	'list-files': makeNative(fn(L) if type(path := L.0) {
		:string -> {
			fs.listFiles(path) |> map(fn(stat) {
				name := [:name, stat.name]
				len := [:len, stat.len]
				mod := [:mod, stat.mod]
				dir := [:dir, stat.dir]
				[name, [len, [mod, [dir, ?]]]]
			}) |> listify()
		}
		_ -> ?
	})
}

fn print(L) if type(L) {
	:null -> '()'
	:empty -> '_'
	:atom -> string(L)
	:string -> '\'' << (L |> replace('\\', '\\\\') |> replace('\'', '\\\'')) << '\''
	:list -> if L {
		[_, _] -> {
			fn sub(term, acc) if term {
				[_, [_, _]] -> sub(term.1, acc << print(term.0))
				[_, ?] -> acc << print(term.0)
				[_, _] -> sub(term.1, acc << print(term.0) << '.')
				_ -> acc << print(term)
			}
			'(' << join(sub(L, []), ' ') << ')'
		}
		[_, _, _] -> if L.2 {
			? -> '(function)'
			_ -> print(L.2)
		}
	}
	_ -> string(L)
}

fn loadLibSources(libs, withEnv) {
	fn sub(i, env) if i {
		len(libs) -> withEnv({ '\x00env': env })
		_ -> {
			file := libs.(i)
			file |> read() |> must() |> eval(env)
			sub(i + 1, env)
		}
	}
	// NOTE: core libraries are loaded into the root env
	sub(0, Env)
}

fn loadStdlib(withEnv) loadLibSources([
	// NOTE: when klisp.oak gets built, these placeholder strings are replaced
	// with the contents of the library source files by the build script.
	//
	// In the Ink-based Klisp CLI, this loading of libraries is asynchronous.
	'{{ lib/klisp }}'
	'{{ lib/macro }}'
	'{{ lib/iter }}'
	'{{ lib/str }}'
	'{{ lib/math }}'
	'{{ lib/sort }}'
	'{{ lib/json }}'
	'{{ lib/random }}'
	'{{ lib/encoding }}'
	'{{ lib/comp }}'
	'{{ lib/mut }}'
	'{{ lib/test }}'
	'{{ lib/import }}'
], withEnv)

// CLI
with loadStdlib() fn(env) {
	lispFileIdx := if idx := args() |> find(fn(arg) arg |> endsWith?('.klisp')) {
		-1 -> default(2)
		_ -> idx
	}
	if path := args().(lispFileIdx) {
		? -> {
			println('Klisp interpreter v0.1-oak.')
			incomplete := ''
			fn sub {
				if incomplete {
					'' -> 'λ '
					_ -> '  '
				} |> oakPrint()
				with input() fn(evt) if evt.type != :error -> {
					if evt.data |> trim() {
						'' -> ?
						';abort', '; abort' -> incomplete <- ''
						_ -> if type(result := read(incomplete + evt.data)) {
							:object -> if result.error {
								'EOF' -> incomplete << evt.data << '\n'
								_ -> println('Syntax error:', result.error)
							}
							_ -> {
								result |> eval(env) |> print() |> println()
								incomplete <- ''
							}
						}
					}
					sub()
				}
			}
			sub()
		}
		_ -> with fs.readFile(path) fn(file) if file {
			? -> println('error: could not read', path)
			_ -> file |> read() |> eval(env)
		}
	}
}

